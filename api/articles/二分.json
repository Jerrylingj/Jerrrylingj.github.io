{"title":"二分","uid":"8038215b5c2b5aa82664c7d7c50d2cdc","slug":"二分","date":"2024-09-26T02:50:13.000Z","updated":"2024-09-29T03:44:42.582Z","comments":true,"path":"api/articles/二分.json","cover":"https://n.sinaimg.cn/sinacn10112/181/w1550h1031/20191218/3315-ikvenft9359266.jpg","content":"<h1 id=\"二分\"><a href=\"#二分\" class=\"headerlink\" title=\"二分\"></a>二分</h1><div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><strong>❗❗❗❗二分查找的前提是被查找的数据必须有二段性</strong></p>\n</div>\n<p>如何理解这句话呢？</p>\n<p>举个例子，在数组[1, 5 , 8, 9, 23, 25, 40]里找9</p>\n<p>我可以让check标准为<code>&lt;=9</code>，则转化为找数组中<code>&lt;=9最大值</code></p>\n<p>对于9左边的数，均小于等于9,而对于9右边的数，均大于9</p>\n<p><code>目标答案的两边一边满足check一边不满足check</code>，这便是二段性的含义</p>\n<p><strong>绝大多数时候，二段性均不明显，需要通过自行定义check标准把二段性弄出来，需要积累一定的题量</strong></p>\n<h2 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h2><p><strong>二分查找</strong>通过不断缩小查找范围，每次将范围缩小一半，最终定位目标元素的位置。</p>\n<h2 id=\"算法思路\"><a href=\"#算法思路\" class=\"headerlink\" title=\"算法思路\"></a>算法思路</h2><ol>\n<li><p><strong>初始化边界</strong></p>\n</li>\n<li><p><strong>进入二分，check(mid)</strong></p>\n</li>\n<li><p><strong>重复操作</strong></p>\n</li>\n</ol>\n<h2 id=\"核心：不断折半\"><a href=\"#核心：不断折半\" class=\"headerlink\" title=\"核心：不断折半\"></a>核心：不断折半</h2><p><strong>折半查找</strong>的关键在于通过不断折半查找区间，可以大幅度减少查找次数，<strong>效率为 O(log n)</strong></p>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><hr>\n<p>二分的模板不唯一，关键就是要<strong>判断好循环终止条件和划分好折半区间的边界，避免死循环</strong></p>\n<p>这里放一个我一直在用的模板</p>\n<p><strong>整数二分</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 模板1：check选左</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// 定义check标准</span><br>\t<span class=\"hljs-keyword\">if</span> (……) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> l = L, r = R; <span class=\"hljs-comment\">// 初始化边界</span><br>    <span class=\"hljs-type\">int</span> mid;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)<br>    &#123;<br>        mid = l + r &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) r = mid;<br>        <span class=\"hljs-keyword\">else</span> l = mid + <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>    cout &lt;&lt; l &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-comment\">// 模板2: check选右</span><br><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// 定义check标准</span><br>\t<span class=\"hljs-keyword\">if</span> (……) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>    <span class=\"hljs-type\">int</span> l = L, r = R;<br>    <span class=\"hljs-type\">int</span> mid;<br>    <span class=\"hljs-keyword\">while</span> (l &lt; r)<br>    &#123;<br>        mid = l + r + <span class=\"hljs-number\">1</span> &gt;&gt; <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) l = mid;<br>        <span class=\"hljs-keyword\">else</span> r = mid - <span class=\"hljs-number\">1</span>;<br>    &#125;<br><br>    cout &lt;&lt; l &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p><strong>小数二分</strong></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs cpp\"><span class=\"hljs-function\"><span class=\"hljs-type\">bool</span> <span class=\"hljs-title\">check</span><span class=\"hljs-params\">(<span class=\"hljs-type\">double</span> x)</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-comment\">// 定义check标准</span><br>\t<span class=\"hljs-keyword\">if</span> (……) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-type\">int</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span><br><span class=\"hljs-function\"></span>&#123;<br>\t<span class=\"hljs-type\">const</span> <span class=\"hljs-type\">double</span> eps = <span class=\"hljs-number\">1e-6</span>; <span class=\"hljs-comment\">// 设置精度</span><br>\t<span class=\"hljs-type\">double</span> l = L, r = R;<br>\t<span class=\"hljs-type\">double</span> mid;<br>\t<span class=\"hljs-keyword\">while</span> (r - l &gt; eps)<br>    &#123;<br>    \tmid = (l + r) / <span class=\"hljs-number\">2</span>;<br>    \t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">check</span>(mid)) r = mid;<br>    \t<span class=\"hljs-keyword\">else</span> l = mid;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"模板题\"><a href=\"#模板题\" class=\"headerlink\" title=\"模板题\"></a>模板题</h3><p><strong><a href=\"https://www.luogu.com.cn/problem/P1083\">洛谷P1083 借教室</a></strong></p>\n<p><strong><a href=\"https://www.luogu.com.cn/problem/P3743\">洛谷P3743 小鸟的设备</a></strong></p>\n<p><strong><a href=\"https://www.luogu.com.cn/problem/P9240\">洛谷P9240 冶炼金属 </a></strong></p>\n<hr>\n<div style=\"text-align: center;\">\n<strong> 如果文中有任何错误之处，欢迎大家在评论区批评指正！<strong>  🙏\n<div>\n","text":"二分 注意 ❗❗❗❗二分查找的前提是被查找的数据必须有二段性 如何理解这句话呢？ 举个例子，在数组[1, 5 , 8, 9, 23, 25, 40]里找9 我可...","permalink":"/post/二分","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"算法","slug":"算法","count":8,"path":"api/categories/算法.json"}],"tags":[{"name":"基础算法","slug":"基础算法","count":2,"path":"api/tags/基础算法.json"},{"name":"二分","slug":"二分","count":1,"path":"api/tags/二分.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%88%86\"><span class=\"toc-text\">二分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%80%9D%E8%B7%AF\"><span class=\"toc-text\">算法思路</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%EF%BC%9A%E4%B8%8D%E6%96%AD%E6%8A%98%E5%8D%8A\"><span class=\"toc-text\">核心：不断折半</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%EF%BC%9A\"><span class=\"toc-text\">代码：</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E6%9D%BF%E9%A2%98\"><span class=\"toc-text\">模板题</span></a></li></ol></li></ol></li></ol>","author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"基础数据结构","uid":"7ff326fdf142ec1868a8e7b87c57157c","slug":"基础数据结构","date":"2024-09-26T05:01:20.000Z","updated":"2024-09-30T08:39:21.340Z","comments":true,"path":"api/articles/基础数据结构.json","cover":"https://th.bing.com/th/id/R.abe96a9db2cbe50efe81eb818678d724?rik=zEX1OHssq3aT6w&pid=ImgRaw&r=0","text":"链表链表是一种线性数据结构，由一系列节点组成，每个节点包含数据部分和指向下一个节点的指针。链表的优点是插入和删除操作效率高，但随机访问的效率较低。根据节点的连接...","permalink":"/post/基础数据结构","photos":[],"count_time":{"symbolsCount":586,"symbolsTime":"1 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":4,"path":"api/categories/数据结构.json"}],"tags":[{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"},{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":1,"path":"api/tags/队列.json"},{"name":"堆","slug":"堆","count":1,"path":"api/tags/堆.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}}},"next_post":{"title":"排序","uid":"2a1893ca085cc0c5b7d1cdcd8c0b1c91","slug":"排序","date":"2024-09-26T02:05:17.000Z","updated":"2024-09-29T03:45:06.195Z","comments":true,"path":"api/articles/排序.json","cover":"https://th.bing.com/th/id/R.ec013c54a665bb6b38fb0390e2987b80?rik=3OfrTtHdScARiQ&riu=http%3a%2f%2fqqpublic.qpic.cn%2fqq_public%2f0%2f0-595029769-EC013C54A665BB6B38FB0390E2987B80%2f0%3ffmt%3djpg%26size%3d101%26h%3d506%26w%3d900%26ppv%3d1.jpg&ehk=YrecwkKXnI1%2b2ARpQFDbvv%2bjFB66bRmEzr9q134unNk%3d&risl=&pid=ImgRaw&r=0","text":"1.快速排序对数组 q 在下标 l 到 r 的范围内进行升序排序。 快速排序通过多次的比较和交换，在一趟排序之中确定好选择的基准应该在的位置。这个位置满足的条件...","permalink":"/post/排序","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"算法","slug":"算法","count":8,"path":"api/categories/算法.json"}],"tags":[{"name":"基础算法","slug":"基础算法","count":2,"path":"api/tags/基础算法.json"},{"name":"快速排序","slug":"快速排序","count":1,"path":"api/tags/快速排序.json"},{"name":"归并排序","slug":"归并排序","count":1,"path":"api/tags/归并排序.json"}],"author":{"name":"Jerry","slug":"blog-author","avatar":"https://th.bing.com/th/id/R.7a1adf834060c41d2d476af2a5e322fd?rik=N35%2fqYx%2fr4RSog&riu=http%3a%2f%2fimg.keaiming.com%2fuploads%2fallimg%2f2020090111%2fsvaseyx4m3v.jpg&ehk=EBywhQ9emNaCt5dbn%2b%2fxbUc5yK42H8b%2ffRDsZKdVI6I%3d&risl=&pid=ImgRaw&r=0","link":"/","description":"一位正在重塑知识的技术人","socials":{"github":"https://github.com/Jerrylingj","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"https://blog.csdn.net/2301_79143568?spm=1010.2135.3001.5343","juejin":"","customs":{}}}}}